/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/modifiers.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_opening_parenthesis {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp LPAR>;
        };

        combo_closing_parenthesis {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp RPAR>;
        };

        combo_opening_curly_brace {
            timeout-ms = <50>;
            key-positions = <14 15>;
            bindings = <&kp LBRC>;
        };

        combo_closing_curly_brace {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp RBRC>;
        };

        combo_opening_square_bracket {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp LBKT>;
        };

        combo_closing_square_bracket {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp RBKT>;
        };

        combo_opening_angle_bracket {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&kp LT>;
        };

        combo_closing_angle_bracket {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp GT>;
        };

        combo_equal {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp EQUAL>;
        };

        combo_underscore {
            timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&kp UNDER>;
        };

        combo_minus {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&kp MINUS>;
        };

        combo_cut_mac {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp LG(X)>;
        };

        combo_copy_mac {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp LG(C)>;
        };

        combo_paste_mac {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp LG(V)>;
        };

        combo_undo_mac {
            timeout-ms = <50>;
            key-positions = <29 28>;
            bindings = <&kp LG(Z)>;
        };

        combo_redo_mac {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&kp LG(LS(Z))>;
        };

        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&caps_word>;
        };

        combo_sticky_layer1 {
            timeout-ms = <50>;
            bindings = <&sl 1>;
            key-positions = <16 19>;
        };

        combo_toggle_layer2 {
            timeout-ms = <50>;
            bindings = <&tog 2>;
            key-positions = <15 20>;
        };

        combo_toggle_layer3 {
            timeout-ms = <50>;
            bindings = <&tog 3>;
            key-positions = <14 21>;
        };

        combo_single_quote {
            timeout-ms = <50>;
            bindings = <&kp SQT>;
            key-positions = <34 33>;
        };

        toggle_mouse {
            bindings = <&tog 4>;
            key-positions = <4 2>;
        };
    };

    behaviors {
        lh_kp_pht: lh_kp_pht {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_KP_HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34>;
            tapping-term-ms = <100>;
            quick-tap-ms = <200>;
            flavor = "tap-unless-interrupted";
        };

        rh_kp_pht: rh_kp_pht {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_KP_HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            quick-tap-ms = <200>;
            flavor = "tap-unless-interrupted";
            hold-trigger-key-positions = <1 2 3 4 13 14 15 16 25 26 27 28 5 17 29>;
        };

        lh_lt_pht: lh_lt_pht {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_LT_HOLD_TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34>;
            tapping-term-ms = <100>;
            quick-tap-ms = <200>;
            flavor = "tap-unless-interrupted";
        };

        rh_lt_pht: rh_lt_pht {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_LT_HOLD_TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            quick-tap-ms = <200>;
            flavor = "tap-unless-interrupted";
            hold-trigger-key-positions = <1 2 3 4 13 14 15 16 25 26 27 28 5 17 29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
&kp ESC       &kp Q  &kp W  &kp E           &lt 3 R             &kp T        &kp Y        &kp U               &kp I           &kp O    &kp P     &kp BSPC
&mt LALT TAB  &kp A  &kp S  &lh_lt_pht 1 D  &lh_kp_pht LSHFT F  &kp G        &kp H        &rh_kp_pht RSHFT J  &rh_lt_pht 1 K  &kp L    &kp SEMI  &mt RCTRL DEL
&kp LSHFT     &kp Z  &kp X  &kp C           &kp V               &kp B        &kp N        &kp M               &kp COMMA       &kp DOT  &kp FSLH  &sk RSHFT
                            &mt LGUI ESC    &mt LCTRL TAB       &lt 2 RET    &lt 1 SPACE  &mt RALT BSPC       &mo 3
            >;
        };

        special_chars_layer {
            label = "SpcChr";
            bindings = <
&trans  &kp AT     &kp HASH   &kp DOLLAR  &kp PRCNT  &trans     &kp LPAR  &kp RPAR  &kp LT     &kp GT     &kp GRAVE  &trans
&trans  &kp EXCL   &kp AMPS   &kp PIPE    &kp DQT    &kp SQT    &kp LBRC  &kp RBRC  &kp UNDER  &kp MINUS  &kp EQUAL  &trans
&trans  &kp QMARK  &kp CARET  &kp TILDE   &kp COLON  &trans     &kp LBKT  &kp RBKT  &kp PLUS   &kp STAR   &kp BSLH   &trans
                              &trans      &trans     &trans     &trans    &trans    &trans
            >;
        };

        f_and_numpad_layer {
            label = "Fx-Num";
            bindings = <
&trans  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5     &kp KP_MINUS  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_DIVIDE    &trans
&trans  &kp F6   &kp F7   &kp F8  &kp F9  &kp F10    &kp KP_PLUS   &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_MULTIPLY  &trans
&trans  &kp F11  &kp F12  &trans  &trans  &trans     &kp KP_DOT    &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_N0        &kp KP_EQUAL
                          &trans  &trans  &trans     &trans        &trans     &trans
            >;
        };

        func_bt_and_nav_layer {
            label = "Fn-Nav";
            bindings = <
&trans  &kp C_PREV    &kp C_PP      &kp C_NEXT  &trans        &trans          &kp PG_UP  &kp HOME  &kp UP    &kp END    &trans  &trans
&trans  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE  &bt BT_SEL 0  &bt BT_SEL 1    &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &kp C_BRI_DN  &kp C_BRI_UP  &trans      &bt BT_SEL 2  &bt BT_CLR      &trans     &trans    &trans    &trans     &trans  &trans
                                    &trans      &trans        &trans          &trans     &trans    &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &kp PAGE_DOWN   &kp UP_ARROW    &kp PAGE_UP      &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &mkp RCLK       &mkp MCLK       &mkp LCLK        &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                &trans          &trans           &trans    &trans  &trans  &trans
            >;
        };
    };
};
